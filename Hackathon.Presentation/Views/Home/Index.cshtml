@{
    ViewBag.Title = "Index";
}
@section scripts{
    
}
@section styles{
    <style>
    .axis text {
      font: 10px sans-serif;
    }

    .axis path,
    .axis line {
      fill: none;
      stroke: #000;
      shape-rendering: crispEdges;
    }

    .bar {
      fill: steelblue;
      fill-opacity: .9;
    }

    .x.axis path {
      display: none;
    }

    label {
      position: absolute;
      top: 10px;
      right: 10px;
    }
    </style>
}


<h2>Index</h2>
<p>Hello World</p>
<div class="chart"></div>
    <script type="text/javascript">
        function addParagraph() {
            d3.select("body").append("p").text("New paragraph!");
        }
    </script>
<btn class="btn btn-success" onclick="addParagraph()">Click Here To Test</btn>
<label><input type="checkbox"> Sort values</label>
<script>

    var margin = { top: 20, right: 20, bottom: 30, left: 40 },
        width = 960 - margin.left - margin.right,
        height = 500 - margin.top - margin.bottom;

    var formatPercent = d3.format(".000");

    var x = d3.scale.ordinal()
        .rangeRoundBands([0, width], .1, 1);

    var y = d3.scale.linear()
        .range([height, 0]);

    var xAxis = d3.svg.axis()
        .scale(x)
        .orient("bottom");

    var yAxis = d3.svg.axis()
        .scale(y)
        .orient("left")
        .tickFormat(formatPercent);

    var svg = d3.select(".chart").append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
      .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    d3.json("Home/data", function (error, data) {

        data.forEach(function (d) {
            d.Item2 = +d.Item2;
        });

        x.domain(data.map(function (d) { return d.Item1; }));
        y.domain([0, d3.max(data, function (d) { return d.Item2; })]);

        svg.append("g")
            .attr("class", "x axis")
            .attr("transform", "translate(0," + height + ")")
            .call(xAxis);

        svg.append("g")
            .attr("class", "y axis")
            .call(yAxis)
          .append("text")
            .attr("transform", "rotate(-90)")
            .attr("y", 6)
            .attr("dy", ".71em")
            .style("text-anchor", "end")
            .text("Atomic Mass (g / mol)");

        svg.selectAll(".bar")
            .data(data)
          .enter().append("rect")
            .attr("class", "bar")
            .attr("x", function (d) { return x(d.Item1); })
            .attr("width", x.rangeBand())
            .attr("y", function (d) { return y(d.Item2); })
            .attr("height", function (d) { return height - y(d.Item2); });

        d3.select("input").on("change", change);

        var sortTimeout = setTimeout(function () {
            d3.select("input").property("checked", true).each(change);
        }, 2000);

        function change() {
            clearTimeout(sortTimeout);

            // Copy-on-write since tweens are evaluated after a delay.
            var x0 = x.domain(data.sort(this.checked
                ? function (a, b) { return b.Item2 - a.Item2; }
                : function (a, b) { return d3.ascending(a.Item1, b.Item1); })
                .map(function (d) { return d.Item1; }))
                .copy();

            var transition = svg.transition().duration(750),
                delay = function (d, i) { return i * 50; };

            transition.selectAll(".bar")
                .delay(delay)
                .attr("x", function (d) { return x0(d.Item1); });

            transition.select(".x.axis")
                .call(xAxis)
              .selectAll("g")
                .delay(delay);
        }
    });

</script>